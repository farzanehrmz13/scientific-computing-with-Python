** start of main.py **

import copy
import random

class Hat:
    def __init__(self, **kwargs):
        self.contents = []
        for color, count in kwargs.items():
            self.contents.extend([color] * count)

    def draw(self, num_balls):
        if num_balls >= len(self.contents):
            # Return all balls and empty the hat
            drawn = self.contents.copy()
            self.contents.clear()
            return drawn
        # Randomly draw num_balls without replacement
        drawn = random.sample(self.contents, num_balls)
        for ball in drawn:
            self.contents.remove(ball)
        return drawn


def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    success_count = 0

    for _ in range(num_experiments):
        trial_hat = copy.deepcopy(hat)
        drawn = trial_hat.draw(num_balls_drawn)

        # Tally drawn balls
        drawn_count = {}
        for color in drawn:
            drawn_count[color] = drawn_count.get(color, 0) + 1

        # Check success condition
        success = all(drawn_count.get(color, 0) >= count 
                      for color, count in expected_balls.items())
        if success:
            success_count += 1

    return success_count / num_experiments


** end of main.py **


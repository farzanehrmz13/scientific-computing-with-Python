** start of main.py **

def add_time(start, duration, day=None):
    # Split the start time into components
    start_time, period = start.split()
    start_hour, start_minute = map(int, start_time.split(':'))
    
    # Convert to 24-hour format based on worldwide clock i mean some country have different model of clock so be careful we're working on the worldwide one
    if period == 'PM' and start_hour != 12:
        start_hour += 12
    if period == 'AM' and start_hour == 12:
        start_hour = 0

    # Split the duration into components 
    duration_hour, duration_minute = map(int, duration.split(':'))
    
    # Calculate the new time
    total_minutes = start_minute + duration_minute
    total_hours = start_hour + duration_hour + total_minutes // 60
    new_minute = total_minutes % 60
    new_hour = total_hours % 24
    days_later = total_hours // 24

    # Determine the new period
    new_period = 'AM' if new_hour < 12 else 'PM'
    if new_hour == 0:
        new_hour = 12
    elif new_hour > 12:
        new_hour -= 12

    # Calculate the day of the week if provided
    if day:
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        start_day_index = days.index(day.lower())
        new_day_index = (start_day_index + days_later) % 7
        new_day = days[new_day_index].capitalize()
        result = f"{new_hour}:{new_minute:02d} {new_period}, {new_day}"
    else:
        result = f"{new_hour}:{new_minute:02d} {new_period}"

    # Add days later if applicable :)
    if days_later > 0:
        if days_later == 1:
            result += " (next day)"
        else:
            result += f" ({days_later} days later)"

    return result


** end of main.py **

